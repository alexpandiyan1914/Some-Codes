import java.util.*;

public class EdgeClassificationDFS {
    static int time = 0;

    static class Graph {
        int V;
        ArrayList<ArrayList<Integer>> adj;
        int[] color;     // 0 = White, 1 = Gray, 2 = Black
        int[] start;     // discovery time
        int[] end;       // finish time

        Graph(int V) {
            this.V = V;
            adj = new ArrayList<>();
            for (int i = 0; i < V; i++)
                adj.add(new ArrayList<>());
            color = new int[V];
            start = new int[V];
            end = new int[V];
        }

        void addEdge(int u, int v) {
            adj.get(u).add(v); // directed edge
        }

        void classifyEdges() {
            for (int i = 0; i < V; i++) {
                if (color[i] == 0)
                    dfs(i);
            }
        }

        void dfs(int u) {
            color[u] = 1; // Gray (discovered)
            start[u] = ++time;

            for (int v : adj.get(u)) {
                if (color[v] == 0) {
                    System.out.println("Tree Edge: " + u + " -> " + v);
                    dfs(v);
                }
                else if (color[v] == 1) {
                    System.out.println("Back Edge: " + u + " -> " + v);
                }
                else {
                    if (start[u] < start[v])
                        System.out.println("Forward Edge: " + u + " -> " + v);
                    else
                        System.out.println("Cross Edge: " + u + " -> " + v);
                }
            }

            color[u] = 2; // Black (finished)
            end[u] = ++time;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter number of vertices: ");
        int V = sc.nextInt();
        System.out.print("Enter number of edges: ");
        int E = sc.nextInt();

        Graph g = new Graph(V);
        System.out.println("Enter edges (u v):");
        for (int i = 0; i < E; i++) {
            int u = sc.nextInt();
            int v = sc.nextInt();
            g.addEdge(u, v);
        }

        System.out.println("\nClassified Edges:");
        g.classifyEdges();
    }
}
